{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install duckdb\n!pip install pandas\n!pip install rdkit\n!pip install scikit-learn","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:10:48.184460Z","iopub.execute_input":"2024-06-04T16:10:48.185589Z","iopub.status.idle":"2024-06-04T16:11:48.829713Z","shell.execute_reply.started":"2024-06-04T16:10:48.185539Z","shell.execute_reply":"2024-06-04T16:11:48.828247Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Requirement already satisfied: duckdb in /opt/conda/lib/python3.10/site-packages (1.0.0)\n\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.2)\nRequirement already satisfied: numpy>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from pandas) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.4)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mRequirement already satisfied: rdkit in /opt/conda/lib/python3.10/site-packages (2023.9.6)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from rdkit) (1.26.4)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from rdkit) (9.5.0)\n\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mRequirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (1.2.2)\nRequirement already satisfied: numpy>=1.17.3 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.26.4)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.11.4)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (3.2.0)\n\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"import duckdb\nimport pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:11:48.832067Z","iopub.execute_input":"2024-06-04T16:11:48.832430Z","iopub.status.idle":"2024-06-04T16:11:49.488906Z","shell.execute_reply.started":"2024-06-04T16:11:48.832385Z","shell.execute_reply":"2024-06-04T16:11:49.487531Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"test_path = '/kaggle/input/leash-BELKA/test.parquet'\ntrain_path = '/kaggle/input/leash-BELKA/train.parquet' #定义训练集和测试集的位置\n\ncon = duckdb.connect()  #连接到DuckDB\n\n#从Parquet文件中读取数据\n#f\"\"\"..\"\"\"是python中格式化字符串（f-strings)的一种形式，允许在字符串中嵌入表达式，并在运行时求值和替换\n#SELECT * 从数据源中选择所有列\n#parquet_scan用于从指定路径的parquet文件中读取数据，{}为之前预定义的占位符，对应前面定义的训练集和测试集\n#WHERE binds = 0 限制读取条件为binds列为0的所有行\n#ORDER BY random() #随机排序这些行#\n# LIMIT 30000) #限制返回的行数为30000行#\n#  UNION ALL #将两部分结果合并在一起，保留所有重复的行#\n#.df() #.df将query方法返回的结果通过df的方法转换为pandas dataframe便于进行后续的分析处理\n\ndf = con.query (f\"\"\"(SELECT *\n                        FROM parquet_scan('{train_path}')\n                        WHERE binds = 0 \n                        ORDER BY random() \n                        LIMIT 30000)\n                        UNION ALL\n                        (SELECT * \n                        FROM parquet_scan('{train_path}')\n                        WHERE binds = 1\n                        ORDER BY random()\n                        LIMIT 30000)\"\"\").df() \n\ncon.close() #关闭连接 ","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:22:56.263742Z","iopub.execute_input":"2024-06-04T16:22:56.264172Z","iopub.status.idle":"2024-06-04T16:23:53.255572Z","shell.execute_reply.started":"2024-06-04T16:22:56.264138Z","shell.execute_reply":"2024-06-04T16:23:53.254489Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"18d121a59bbc4ebeb9fb0e047c5fba91"}},"metadata":{}}]},{"cell_type":"code","source":"df.head() #查看数据框的前五行","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:23:59.360048Z","iopub.execute_input":"2024-06-04T16:23:59.360473Z","iopub.status.idle":"2024-06-04T16:23:59.390707Z","shell.execute_reply.started":"2024-06-04T16:23:59.360438Z","shell.execute_reply":"2024-06-04T16:23:59.389351Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"          id                              buildingblock1_smiles  \\\n0   69418295  N#Cc1ccc([C@H](CC(=O)O)NC(=O)OCC2c3ccccc3-c3cc...   \n1  141571275  O=C(Nc1c(C(=O)O)cnn1-c1ccc(F)cc1)OCC1c2ccccc2-...   \n2   29713431  COc1cc(C(=O)O)c(N)cc1NC(=O)OCC1c2ccccc2-c2ccccc21   \n3  224422431  O=C(Nc1nc(C(F)(F)F)c(C(=O)O)s1)OCC1c2ccccc2-c2...   \n4  217578608         O=C(Nc1cccnc1C(=O)O)OCC1c2ccccc2-c2ccccc21   \n\n               buildingblock2_smiles       buildingblock3_smiles  \\\n0                       NCCN1CCCOCC1          Cc1nn(CCN)c(C)c1Cl   \n1  Nc1nc(-c2cccc([N+](=O)[O-])c2)cs1          Nc1ccc2c(c1)CNC2=O   \n2                    COc1nc(Cl)ncc1N              N#Cc1nc[nH]c1N   \n3             Nc1ncnc2c1ncn2C1CCCCO1               COc1ccc(N)nc1   \n4                         NCCC1SCCS1  Nc1ccc(F)c([N+](=O)[O-])c1   \n\n                                     molecule_smiles protein_name  binds  \n0  Cc1nn(CCNc2nc(NCCN3CCCOCC3)nc(N[C@@H](CC(=O)N[...          sEH      0  \n1  O=C1NCc2cc(Nc3nc(Nc4nc(-c5cccc([N+](=O)[O-])c5...         BRD4      0  \n2  COc1cc(C(=O)N[Dy])c(N)cc1Nc1nc(Nc2cnc(Cl)nc2OC...         BRD4      0  \n3  COc1ccc(Nc2nc(Nc3nc(C(F)(F)F)c(C(=O)N[Dy])s3)n...         BRD4      0  \n4  O=C(N[Dy])c1ncccc1Nc1nc(NCCC2SCCS2)nc(Nc2ccc(F...          sEH      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>buildingblock1_smiles</th>\n      <th>buildingblock2_smiles</th>\n      <th>buildingblock3_smiles</th>\n      <th>molecule_smiles</th>\n      <th>protein_name</th>\n      <th>binds</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>69418295</td>\n      <td>N#Cc1ccc([C@H](CC(=O)O)NC(=O)OCC2c3ccccc3-c3cc...</td>\n      <td>NCCN1CCCOCC1</td>\n      <td>Cc1nn(CCN)c(C)c1Cl</td>\n      <td>Cc1nn(CCNc2nc(NCCN3CCCOCC3)nc(N[C@@H](CC(=O)N[...</td>\n      <td>sEH</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>141571275</td>\n      <td>O=C(Nc1c(C(=O)O)cnn1-c1ccc(F)cc1)OCC1c2ccccc2-...</td>\n      <td>Nc1nc(-c2cccc([N+](=O)[O-])c2)cs1</td>\n      <td>Nc1ccc2c(c1)CNC2=O</td>\n      <td>O=C1NCc2cc(Nc3nc(Nc4nc(-c5cccc([N+](=O)[O-])c5...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29713431</td>\n      <td>COc1cc(C(=O)O)c(N)cc1NC(=O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>COc1nc(Cl)ncc1N</td>\n      <td>N#Cc1nc[nH]c1N</td>\n      <td>COc1cc(C(=O)N[Dy])c(N)cc1Nc1nc(Nc2cnc(Cl)nc2OC...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>224422431</td>\n      <td>O=C(Nc1nc(C(F)(F)F)c(C(=O)O)s1)OCC1c2ccccc2-c2...</td>\n      <td>Nc1ncnc2c1ncn2C1CCCCO1</td>\n      <td>COc1ccc(N)nc1</td>\n      <td>COc1ccc(Nc2nc(Nc3nc(C(F)(F)F)c(C(=O)N[Dy])s3)n...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>217578608</td>\n      <td>O=C(Nc1cccnc1C(=O)O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>NCCC1SCCS1</td>\n      <td>Nc1ccc(F)c([N+](=O)[O-])c1</td>\n      <td>O=C(N[Dy])c1ncccc1Nc1nc(NCCC2SCCS2)nc(Nc2ccc(F...</td>\n      <td>sEH</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from rdkit import Chem  # RDKit的核心模块，用于分子对象的创建和基本操作\nfrom rdkit.Chem import AllChem  # RDKit的拓展模块，提供高级化学功能\nfrom sklearn.ensemble import RandomForestClassifier  # 随机森林分类器\nfrom sklearn.model_selection import train_test_split  # 数据集划分\nfrom sklearn.metrics import average_precision_score  # 评估指标\nfrom sklearn.preprocessing import OneHotEncoder  # 一热编码\n","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:24:04.278653Z","iopub.execute_input":"2024-06-04T16:24:04.279064Z","iopub.status.idle":"2024-06-04T16:24:05.593945Z","shell.execute_reply.started":"2024-06-04T16:24:04.279031Z","shell.execute_reply":"2024-06-04T16:24:05.592350Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"#将smile转为RDKit的分子\n#df[]是pandas对数据框进行访问、修改的常见用法\n\ndf['molecule'] = df['molecule_smiles'].apply(Chem.MolFromSmiles) #借助pandas中的apply方法，对数据框中molecule_smiles列调用Chem.MolFromSmiles，将结果存储在新的molecule列中\n\n#定义了一个生成ECFP的函数“generate_ecfp\",ECFP的半径为2（默认），生成的指纹位数为1024\n#GetMorganFingerprintAsBitVect是RDKit提供的函数，用于生成分子的Morgan指纹（ECFP）\n#这个函数式定义了一个ECFP生成函数，首先会读取molecule这一列，如果是空则返回none，否则就返回生成的指纹列表\n\ndef generate_ecfp(molecule, radius=2, bits=1024):\n    if molecule is None:\n        return None\n    return list(AllChem.GetMorganFingerprintAsBitVect(molecule, radius, nBits=bits)) \n    \n#根据generate_ecfp函数进行ECFPs的生成，并存储在列表的ecfp列中\n\ndf['ecfp'] = df['molecule'].apply(generate_ecfp)#得到ECFPs","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:24:09.393603Z","iopub.execute_input":"2024-06-04T16:24:09.393995Z","iopub.status.idle":"2024-06-04T16:25:47.976592Z","shell.execute_reply.started":"2024-06-04T16:24:09.393964Z","shell.execute_reply":"2024-06-04T16:25:47.975434Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"df.head() #会发现多了两列，molecule和ecfp","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:26:09.522905Z","iopub.execute_input":"2024-06-04T16:26:09.523302Z","iopub.status.idle":"2024-06-04T16:26:09.548856Z","shell.execute_reply.started":"2024-06-04T16:26:09.523271Z","shell.execute_reply":"2024-06-04T16:26:09.547674Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"          id                              buildingblock1_smiles  \\\n0   69418295  N#Cc1ccc([C@H](CC(=O)O)NC(=O)OCC2c3ccccc3-c3cc...   \n1  141571275  O=C(Nc1c(C(=O)O)cnn1-c1ccc(F)cc1)OCC1c2ccccc2-...   \n2   29713431  COc1cc(C(=O)O)c(N)cc1NC(=O)OCC1c2ccccc2-c2ccccc21   \n3  224422431  O=C(Nc1nc(C(F)(F)F)c(C(=O)O)s1)OCC1c2ccccc2-c2...   \n4  217578608         O=C(Nc1cccnc1C(=O)O)OCC1c2ccccc2-c2ccccc21   \n\n               buildingblock2_smiles       buildingblock3_smiles  \\\n0                       NCCN1CCCOCC1          Cc1nn(CCN)c(C)c1Cl   \n1  Nc1nc(-c2cccc([N+](=O)[O-])c2)cs1          Nc1ccc2c(c1)CNC2=O   \n2                    COc1nc(Cl)ncc1N              N#Cc1nc[nH]c1N   \n3             Nc1ncnc2c1ncn2C1CCCCO1               COc1ccc(N)nc1   \n4                         NCCC1SCCS1  Nc1ccc(F)c([N+](=O)[O-])c1   \n\n                                     molecule_smiles protein_name  binds  \\\n0  Cc1nn(CCNc2nc(NCCN3CCCOCC3)nc(N[C@@H](CC(=O)N[...          sEH      0   \n1  O=C1NCc2cc(Nc3nc(Nc4nc(-c5cccc([N+](=O)[O-])c5...         BRD4      0   \n2  COc1cc(C(=O)N[Dy])c(N)cc1Nc1nc(Nc2cnc(Cl)nc2OC...         BRD4      0   \n3  COc1ccc(Nc2nc(Nc3nc(C(F)(F)F)c(C(=O)N[Dy])s3)n...         BRD4      0   \n4  O=C(N[Dy])c1ncccc1Nc1nc(NCCC2SCCS2)nc(Nc2ccc(F...          sEH      0   \n\n                                           molecule  \\\n0  <rdkit.Chem.rdchem.Mol object at 0x7adbe560bf40>   \n1  <rdkit.Chem.rdchem.Mol object at 0x7adbe5670040>   \n2  <rdkit.Chem.rdchem.Mol object at 0x7adbe56700b0>   \n3  <rdkit.Chem.rdchem.Mol object at 0x7adbe5670120>   \n4  <rdkit.Chem.rdchem.Mol object at 0x7adbe5670190>   \n\n                                                ecfp  \n0  [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...  \n1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...  \n2  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...  \n3  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...  \n4  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>buildingblock1_smiles</th>\n      <th>buildingblock2_smiles</th>\n      <th>buildingblock3_smiles</th>\n      <th>molecule_smiles</th>\n      <th>protein_name</th>\n      <th>binds</th>\n      <th>molecule</th>\n      <th>ecfp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>69418295</td>\n      <td>N#Cc1ccc([C@H](CC(=O)O)NC(=O)OCC2c3ccccc3-c3cc...</td>\n      <td>NCCN1CCCOCC1</td>\n      <td>Cc1nn(CCN)c(C)c1Cl</td>\n      <td>Cc1nn(CCNc2nc(NCCN3CCCOCC3)nc(N[C@@H](CC(=O)N[...</td>\n      <td>sEH</td>\n      <td>0</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7adbe560bf40&gt;</td>\n      <td>[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>141571275</td>\n      <td>O=C(Nc1c(C(=O)O)cnn1-c1ccc(F)cc1)OCC1c2ccccc2-...</td>\n      <td>Nc1nc(-c2cccc([N+](=O)[O-])c2)cs1</td>\n      <td>Nc1ccc2c(c1)CNC2=O</td>\n      <td>O=C1NCc2cc(Nc3nc(Nc4nc(-c5cccc([N+](=O)[O-])c5...</td>\n      <td>BRD4</td>\n      <td>0</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7adbe5670040&gt;</td>\n      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29713431</td>\n      <td>COc1cc(C(=O)O)c(N)cc1NC(=O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>COc1nc(Cl)ncc1N</td>\n      <td>N#Cc1nc[nH]c1N</td>\n      <td>COc1cc(C(=O)N[Dy])c(N)cc1Nc1nc(Nc2cnc(Cl)nc2OC...</td>\n      <td>BRD4</td>\n      <td>0</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7adbe56700b0&gt;</td>\n      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>224422431</td>\n      <td>O=C(Nc1nc(C(F)(F)F)c(C(=O)O)s1)OCC1c2ccccc2-c2...</td>\n      <td>Nc1ncnc2c1ncn2C1CCCCO1</td>\n      <td>COc1ccc(N)nc1</td>\n      <td>COc1ccc(Nc2nc(Nc3nc(C(F)(F)F)c(C(=O)N[Dy])s3)n...</td>\n      <td>BRD4</td>\n      <td>0</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7adbe5670120&gt;</td>\n      <td>[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>217578608</td>\n      <td>O=C(Nc1cccnc1C(=O)O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>NCCC1SCCS1</td>\n      <td>Nc1ccc(F)c([N+](=O)[O-])c1</td>\n      <td>O=C(N[Dy])c1ncccc1Nc1nc(NCCC2SCCS2)nc(Nc2ccc(F...</td>\n      <td>sEH</td>\n      <td>0</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7adbe5670190&gt;</td>\n      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# One-hot encode the protein_name\nonehot_encoder = OneHotEncoder(sparse_output=False) #将分类变量转化为一热编码，并指定输出为密集数组(非稀疏矩阵）\nprotein_onehot = onehot_encoder.fit_transform(df['protein_name'].values.reshape(-1, 1)) #将蛋白质名称转化为二维数组，从而符合OneHotEncoder的输入格式\n\n# Combine ECFPs and one-hot encoded protein_name\n#我们需要将所有的特征组合成单一的输入矩阵（或向量），以便将其传递给模型，在这里，我们有两组特征：ECFPS表示分子的化学结构特征、One-hot encoded protein_name表示蛋白质的信息特征\nX = [ecfp + protein for ecfp, protein in zip(df['ecfp'].tolist(), protein_onehot.tolist())]\ny = df['binds'].tolist()\n\n# Split the data into train and test sets\n#利用train_test_split函数可以将数据集划分为训练集和测试集\n#训练集和测试集的划定(test_size)需要根据数据集大小以及模型评估需求来确定，数据集小则需要考虑更大的训练集比例，一般为0.2\n#划分数据集要设置随机种子以确保数据集划分的一致性和结果的可重复性，通常选择42\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create and train the random forest model\n#n_estimators指定了随机森林中树的数量，此处包含100课决策树，更多的树意味着更稳定和更准确的模型，但是计算成本也会增加。\n#使用'fit'的方法进行模型训练，让模型学会输入特征和目标标签之间的关系\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Make predictions on the test set\n#使用训练好的随机森林模型对测试数据集进行预测，并提取预测为正类（通常表示目标类别为1）的概率\n#[:,1]是numpy中的切片操作，目的是提取每个样本属于类别1的概率\ny_pred_proba = rf_model.predict_proba(X_test)[:, 1]  # Probability of the positive class\n\n# Calculate the mean average precision 计算并打印模型在测试集上的平均精度\nmap_score = average_precision_score(y_test, y_pred_proba)\nprint(f\"Mean Average Precision (mAP): {map_score:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:26:15.423601Z","iopub.execute_input":"2024-06-04T16:26:15.424012Z","iopub.status.idle":"2024-06-04T16:26:56.286596Z","shell.execute_reply.started":"2024-06-04T16:26:15.423982Z","shell.execute_reply":"2024-06-04T16:26:56.285473Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Mean Average Precision (mAP): 0.97\n","output_type":"stream"}]},{"cell_type":"code","source":"#利用训练的模型进行预测\nimport os\n\n# Process the test.parquet file chunk by chunk\ntest_file = '/kaggle/input/leash-BELKA/test.csv'\noutput_file = 'submission.csv'  # Specify the path and filename for the output file\n\n# Read the test.parquet file into a pandas DataFrame\n#chunksize指定了分块读取，即每次读取100000行数据，对于大文件的读取，可以节省内存，对于每个分块进行下面的处理\n\n\n\n#创建输出数据框并保存结果\n#for循环使用pandas的read_csv函数结合chunksize参数，分块读取文件，生成器会逐块读取文件，直到迭代自动结束\nfor df_test in pd.read_csv(test_file, chunksize=100000):\n\n    # Generate ECFPs for the molecule_smiles\n    #生成分子指纹并且放置在新的一列数据中\n    df_test['molecule'] = df_test['molecule_smiles'].apply(Chem.MolFromSmiles)\n    df_test['ecfp'] = df_test['molecule'].apply(generate_ecfp)\n\n    # One-hot encode the protein_name\n    #将蛋白进行一热编码\n    protein_onehot = onehot_encoder.transform(df_test['protein_name'].values.reshape(-1, 1))\n\n    # Combine ECFPs and one-hot encoded protein_name\n    #将分子指纹与蛋白热编码进行组合，生成特征向量列表X_test\n    X_test = [ecfp + protein for ecfp, protein in zip(df_test['ecfp'].tolist(), protein_onehot.tolist())]\n\n    # Predict the probabilities\n    #使用随机森林模型对预测测试集进行预测，并计算测试集样本中属于类别1的概率\n    probabilities = rf_model.predict_proba(X_test)[:, 1]\n\n    # Create a DataFrame with 'id' and 'probability' columns\n    #创建输出数据框\n    output_df = pd.DataFrame({'id': df_test['id'], 'binds': probabilities})\n\n    # Save the output DataFrame to a CSV file\n    #将结果保存为csv文件\n    output_df.to_csv(output_file, index=False, mode='a', header=not os.path.exists(output_file))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-04T16:30:16.480558Z","iopub.execute_input":"2024-06-04T16:30:16.480980Z","iopub.status.idle":"2024-06-04T17:21:26.151514Z","shell.execute_reply.started":"2024-06-04T16:30:16.480948Z","shell.execute_reply":"2024-06-04T17:21:26.150248Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"import gc\ncon.close()\ngc.collect()","metadata":{"execution":{"iopub.status.busy":"2024-06-04T17:30:12.627971Z","iopub.execute_input":"2024-06-04T17:30:12.628576Z","iopub.status.idle":"2024-06-04T17:30:14.262366Z","shell.execute_reply.started":"2024-06-04T17:30:12.628530Z","shell.execute_reply":"2024-06-04T17:30:14.260743Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"1321"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}