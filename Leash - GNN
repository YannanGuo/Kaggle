{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":67356,"databundleVersionId":8006601,"sourceType":"competition"}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install rdkit\n!pip install duckdb","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-05T02:03:46.428003Z","iopub.execute_input":"2024-06-05T02:03:46.429091Z","iopub.status.idle":"2024-06-05T02:04:22.826515Z","shell.execute_reply.started":"2024-06-05T02:03:46.429042Z","shell.execute_reply":"2024-06-05T02:04:22.825237Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting rdkit\n  Downloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.9 kB)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from rdkit) (1.26.4)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from rdkit) (9.5.0)\nDownloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.9/34.9 MB\u001b[0m \u001b[31m35.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mInstalling collected packages: rdkit\nSuccessfully installed rdkit-2023.9.6\nCollecting duckdb\n  Downloading duckdb-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (762 bytes)\nDownloading duckdb-1.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.5/18.5 MB\u001b[0m \u001b[31m59.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mInstalling collected packages: duckdb\nSuccessfully installed duckdb-1.0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:30:15.239750Z","iopub.execute_input":"2024-06-05T02:30:15.240759Z","iopub.status.idle":"2024-06-05T02:30:15.248420Z","shell.execute_reply.started":"2024-06-05T02:30:15.240719Z","shell.execute_reply":"2024-06-05T02:30:15.247237Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/leash-BELKA/sample_submission.csv\n/kaggle/input/leash-BELKA/train.parquet\n/kaggle/input/leash-BELKA/test.parquet\n/kaggle/input/leash-BELKA/train.csv\n/kaggle/input/leash-BELKA/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\n\nfrom rdkit import Chem\nfrom rdkit.Chem import MACCSkeys\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem import rdmolops\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport torch","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:35:31.769547Z","iopub.execute_input":"2024-06-05T02:35:31.770305Z","iopub.status.idle":"2024-06-05T02:35:33.740757Z","shell.execute_reply.started":"2024-06-05T02:35:31.770270Z","shell.execute_reply":"2024-06-05T02:35:33.739846Z"},"trusted":true},"execution_count":4,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","Cell \u001b[0;32mIn[4], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mrdkit\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Chem\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mrdkit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mChem\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m MACCSkeys\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mrdkit\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mChem\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m AllChem\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'rdkit'"],"ename":"ModuleNotFoundError","evalue":"No module named 'rdkit'","output_type":"error"}]},{"cell_type":"code","source":"import duckdb\nimport pandas as pd\n\ntrain_path = '/kaggle/input/leash-BELKA/train.parquet'\ntest_path = '/kaggle/input/leash-BELKA/test.parquet'\n\ncon = duckdb.connect()\n\ndf = con.query (f\"\"\"(SELECT *\n                        FROM parquet_scan('{train_path}')\n                        WHERE binds = 0 \n                        ORDER BY random() \n                        LIMIT 30000)\n                        UNION ALL\n                        (SELECT * \n                        FROM parquet_scan('{train_path}')\n                        WHERE binds = 1\n                        ORDER BY random()\n                        LIMIT 30000)\"\"\").df() \n\ncon.close()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:35:24.185889Z","iopub.execute_input":"2024-06-05T02:35:24.186283Z","iopub.status.idle":"2024-06-05T02:35:24.206531Z","shell.execute_reply.started":"2024-06-05T02:35:24.186247Z","shell.execute_reply":"2024-06-05T02:35:24.205584Z"},"trusted":true},"execution_count":3,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","Cell \u001b[0;32mIn[3], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mduckdb\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[1;32m      4\u001b[0m train_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/leash-BELKA/train.parquet\u001b[39m\u001b[38;5;124m'\u001b[39m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'duckdb'"],"ename":"ModuleNotFoundError","evalue":"No module named 'duckdb'","output_type":"error"}]},{"cell_type":"code","source":"df.head(20)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:19:32.532046Z","iopub.execute_input":"2024-06-05T02:19:32.532441Z","iopub.status.idle":"2024-06-05T02:19:32.555931Z","shell.execute_reply.started":"2024-06-05T02:19:32.532411Z","shell.execute_reply":"2024-06-05T02:19:32.554761Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"           id                              buildingblock1_smiles  \\\n0   142156768     O=C(Nc1c(C(=O)O)cnn1CCO)OCC1c2ccccc2-c2ccccc21   \n1   292303987  O=C(O)[C@H]1C[C@H](O)CN1C(=O)OCC1c2ccccc2-c2cc...   \n2    30185731  COc1cc(C(=O)O)c(N)cc1NC(=O)OCC1c2ccccc2-c2ccccc21   \n3   131552292  O=C(N[C@H]1CC[C@@H](C(=O)O)C1)OCC1c2ccccc2-c2c...   \n4   230665942     O=C(Nc1ncc(Br)nc1C(=O)O)OCC1c2ccccc2-c2ccccc21   \n5   135301858     O=C(Nc1c(Br)cccc1C(=O)O)OCC1c2ccccc2-c2ccccc21   \n6   271627115  O=C(O)C[C@H](Cc1ccc([N+](=O)[O-])cc1)NC(=O)OCC...   \n7   182368282  O=C(Nc1ccc(C(=O)O)c(C(=O)O)c1)OCC1c2ccccc2-c2c...   \n8   278770439      O=C(O)Cc1ccc(NC(=O)OCC2c3ccccc3-c3ccccc32)cc1   \n9   237910291     O=C(O)CC1(CNC(=O)OCC2c3ccccc3-c3ccccc32)CCCCC1   \n10  184671883   O=C(Nc1ccc(C(=O)O)c(Cl)c1)OCC1c2ccccc2-c2ccccc21   \n11  152675240  O=C(Nc1c(I)c(C(=O)O)c(I)c(C(=O)O)c1I)OCC1c2ccc...   \n12  206258889  O=C(Nc1ccc2cc(C(=O)O)ccc2c1)OCC1c2ccccc2-c2ccc...   \n13  126016062  O=C(N[C@H](Cc1ccc([N+](=O)[O-])cc1)C(=O)O)OCC1...   \n14  144211409  O=C(Nc1c(Cl)c(Cl)nc(C(=O)O)c1Cl)OCC1c2ccccc2-c...   \n15  214454004      O=C(Nc1cccc(I)c1C(=O)O)OCC1c2ccccc2-c2ccccc21   \n16  188725683  O=C(Nc1ccc(C(=O)O)cc1C(F)(F)F)OCC1c2ccccc2-c2c...   \n17   81944820      O=C(NCC1CCC(C(=O)O)CC1)OCC1c2ccccc2-c2ccccc21   \n18  218683816       O=C(Nc1ccnc(C(=O)O)c1)OCC1c2ccccc2-c2ccccc21   \n19   31208011   COc1cc(C(=O)O)c(NC(=O)OCC2c3ccccc3-c3ccccc32)cn1   \n\n            buildingblock2_smiles                 buildingblock3_smiles  \\\n0       Cl.Cn1cc(CN)c(=O)[nH]c1=O                        Nc1ccc(Cl)cc1F   \n1            CSc1ccc(CN)cc1C#N.Cl                  Cl.Cl.NCC(O)c1ccncc1   \n2                      NCCC1SCCS1                       Nc1ncc(Cl)cc1Cl   \n3    NCc1ccccc1CS(=O)(=O)N1CCOCC1                          Nc1cncc(F)c1   \n4              NC[C@@H]1CCC(=O)N1                         CCS(=O)CCN.Cl   \n5        COC1(C(F)(F)CN)CCOCC1.Cl    CC(C)(C)OC(=O)N1CCC(n2cc(N)cn2)CC1   \n6         Cc1cc(CN)cc(Cl)n1.Cl.Cl                 Cl.NCCC(=O)NCc1ccccc1   \n7                    Cc1cnc(N)cn1                      COc1ccc(O)c(N)c1   \n8              Nc1ccc2c(c1)CCC2=O                             Nc1cncnc1   \n9       Cc1cccc2oc(CCN)nc12.Cl.Cl    Cl.Cl.Cn1ccnc1Cn1c(CCCN)nc2c1CCCC2   \n10             Cl.NCC(F)(F)CC1CC1                     Nc1cnc(Cl)c(Cl)c1   \n11             CN1CCN(C(=O)CN)CC1                         Nc1ccc(F)cc1F   \n12  Cc1cc(C)c(N)c([N+](=O)[O-])c1              NCc1ccc(Oc2cccnc2)c(F)c1   \n13             NCC1(CO)CC2C=CC1C2                    Cc1nn(CCN)c(C)c1Cl   \n14      Cc1cccc2oc(CCN)nc12.Cl.Cl  CC(C)(C)OC(=O)N1Cc2c(N)n[nH]c2C1(C)C   \n15                  Nc1ccc(F)cc1F                 Cl.NCC1CC2(C1)CC2(F)F   \n16             COc1cc(F)c(Cl)cc1N         CCC1=NN(Cc2ccccc2C)C(=O)C1CCN   \n17                 COc1c(N)cccc1F                       Nc1ncc(Cl)nc1Cl   \n18               NCCc1coc2ccccc12                        Cc1cc(N)cnc1Br   \n19               N#Cc1cc(N)ccc1Cl                            NCCC1CCOC1   \n\n                                      molecule_smiles protein_name  binds  \n0   Cn1cc(CNc2nc(Nc3ccc(Cl)cc3F)nc(Nc3c(C(=O)N[Dy]...          HSA      0  \n1   CSc1ccc(CNc2nc(NCC(O)c3ccncc3)nc(N3C[C@@H](O)C...          HSA      0  \n2   COc1cc(C(=O)N[Dy])c(N)cc1Nc1nc(NCCC2SCCS2)nc(N...          HSA      0  \n3   O=C(N[Dy])[C@@H]1CC[C@H](Nc2nc(NCc3ccccc3CS(=O...         BRD4      0  \n4   CCS(=O)CCNc1nc(NC[C@@H]2CCC(=O)N2)nc(Nc2ncc(Br...          HSA      0  \n5   COC1(C(F)(F)CNc2nc(Nc3cnn(C4CCN(C(=O)OC(C)(C)C...          HSA      0  \n6   Cc1cc(CNc2nc(NCCC(=O)NCc3ccccc3)nc(N[C@H](CC(=...          sEH      0  \n7   COc1ccc(O)c(Nc2nc(Nc3ccc(C(=O)N[Dy])c(C(=O)O)c...          HSA      0  \n8   O=C(Cc1ccc(Nc2nc(Nc3cncnc3)nc(Nc3ccc4c(c3)CCC4...          sEH      0  \n9   Cc1cccc2oc(CCNc3nc(NCCCc4nc5c(n4Cc4nccn4C)CCCC...          HSA      0  \n10  O=C(N[Dy])c1ccc(Nc2nc(NCC(F)(F)CC3CC3)nc(Nc3cn...          HSA      0  \n11  CN1CCN(C(=O)CNc2nc(Nc3ccc(F)cc3F)nc(Nc3c(I)c(C...          sEH      0  \n12  Cc1cc(C)c(Nc2nc(NCc3ccc(Oc4cccnc4)c(F)c3)nc(Nc...         BRD4      0  \n13  Cc1nn(CCNc2nc(NCC3(CO)CC4C=CC3C4)nc(N[C@H](Cc3...         BRD4      0  \n14  Cc1cccc2oc(CCNc3nc(Nc4n[nH]c5c4CN(C(=O)OC(C)(C...          sEH      0  \n15  O=C(N[Dy])c1c(I)cccc1Nc1nc(NCC2CC3(C2)CC3(F)F)...         BRD4      0  \n16  CCC1=NN(Cc2ccccc2C)C(=O)C1CCNc1nc(Nc2cc(Cl)c(F...         BRD4      0  \n17  COc1c(F)cccc1Nc1nc(NCC2CCC(C(=O)N[Dy])CC2)nc(N...         BRD4      0  \n18  Cc1cc(Nc2nc(NCCc3coc4ccccc34)nc(Nc3ccnc(C(=O)N...          HSA      0  \n19  COc1cc(C(=O)N[Dy])c(Nc2nc(NCCC3CCOC3)nc(Nc3ccc...          HSA      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>buildingblock1_smiles</th>\n      <th>buildingblock2_smiles</th>\n      <th>buildingblock3_smiles</th>\n      <th>molecule_smiles</th>\n      <th>protein_name</th>\n      <th>binds</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>142156768</td>\n      <td>O=C(Nc1c(C(=O)O)cnn1CCO)OCC1c2ccccc2-c2ccccc21</td>\n      <td>Cl.Cn1cc(CN)c(=O)[nH]c1=O</td>\n      <td>Nc1ccc(Cl)cc1F</td>\n      <td>Cn1cc(CNc2nc(Nc3ccc(Cl)cc3F)nc(Nc3c(C(=O)N[Dy]...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>292303987</td>\n      <td>O=C(O)[C@H]1C[C@H](O)CN1C(=O)OCC1c2ccccc2-c2cc...</td>\n      <td>CSc1ccc(CN)cc1C#N.Cl</td>\n      <td>Cl.Cl.NCC(O)c1ccncc1</td>\n      <td>CSc1ccc(CNc2nc(NCC(O)c3ccncc3)nc(N3C[C@@H](O)C...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>30185731</td>\n      <td>COc1cc(C(=O)O)c(N)cc1NC(=O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>NCCC1SCCS1</td>\n      <td>Nc1ncc(Cl)cc1Cl</td>\n      <td>COc1cc(C(=O)N[Dy])c(N)cc1Nc1nc(NCCC2SCCS2)nc(N...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>131552292</td>\n      <td>O=C(N[C@H]1CC[C@@H](C(=O)O)C1)OCC1c2ccccc2-c2c...</td>\n      <td>NCc1ccccc1CS(=O)(=O)N1CCOCC1</td>\n      <td>Nc1cncc(F)c1</td>\n      <td>O=C(N[Dy])[C@@H]1CC[C@H](Nc2nc(NCc3ccccc3CS(=O...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>230665942</td>\n      <td>O=C(Nc1ncc(Br)nc1C(=O)O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>NC[C@@H]1CCC(=O)N1</td>\n      <td>CCS(=O)CCN.Cl</td>\n      <td>CCS(=O)CCNc1nc(NC[C@@H]2CCC(=O)N2)nc(Nc2ncc(Br...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>135301858</td>\n      <td>O=C(Nc1c(Br)cccc1C(=O)O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>COC1(C(F)(F)CN)CCOCC1.Cl</td>\n      <td>CC(C)(C)OC(=O)N1CCC(n2cc(N)cn2)CC1</td>\n      <td>COC1(C(F)(F)CNc2nc(Nc3cnn(C4CCN(C(=O)OC(C)(C)C...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>271627115</td>\n      <td>O=C(O)C[C@H](Cc1ccc([N+](=O)[O-])cc1)NC(=O)OCC...</td>\n      <td>Cc1cc(CN)cc(Cl)n1.Cl.Cl</td>\n      <td>Cl.NCCC(=O)NCc1ccccc1</td>\n      <td>Cc1cc(CNc2nc(NCCC(=O)NCc3ccccc3)nc(N[C@H](CC(=...</td>\n      <td>sEH</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>182368282</td>\n      <td>O=C(Nc1ccc(C(=O)O)c(C(=O)O)c1)OCC1c2ccccc2-c2c...</td>\n      <td>Cc1cnc(N)cn1</td>\n      <td>COc1ccc(O)c(N)c1</td>\n      <td>COc1ccc(O)c(Nc2nc(Nc3ccc(C(=O)N[Dy])c(C(=O)O)c...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>278770439</td>\n      <td>O=C(O)Cc1ccc(NC(=O)OCC2c3ccccc3-c3ccccc32)cc1</td>\n      <td>Nc1ccc2c(c1)CCC2=O</td>\n      <td>Nc1cncnc1</td>\n      <td>O=C(Cc1ccc(Nc2nc(Nc3cncnc3)nc(Nc3ccc4c(c3)CCC4...</td>\n      <td>sEH</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>237910291</td>\n      <td>O=C(O)CC1(CNC(=O)OCC2c3ccccc3-c3ccccc32)CCCCC1</td>\n      <td>Cc1cccc2oc(CCN)nc12.Cl.Cl</td>\n      <td>Cl.Cl.Cn1ccnc1Cn1c(CCCN)nc2c1CCCC2</td>\n      <td>Cc1cccc2oc(CCNc3nc(NCCCc4nc5c(n4Cc4nccn4C)CCCC...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>184671883</td>\n      <td>O=C(Nc1ccc(C(=O)O)c(Cl)c1)OCC1c2ccccc2-c2ccccc21</td>\n      <td>Cl.NCC(F)(F)CC1CC1</td>\n      <td>Nc1cnc(Cl)c(Cl)c1</td>\n      <td>O=C(N[Dy])c1ccc(Nc2nc(NCC(F)(F)CC3CC3)nc(Nc3cn...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>152675240</td>\n      <td>O=C(Nc1c(I)c(C(=O)O)c(I)c(C(=O)O)c1I)OCC1c2ccc...</td>\n      <td>CN1CCN(C(=O)CN)CC1</td>\n      <td>Nc1ccc(F)cc1F</td>\n      <td>CN1CCN(C(=O)CNc2nc(Nc3ccc(F)cc3F)nc(Nc3c(I)c(C...</td>\n      <td>sEH</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>206258889</td>\n      <td>O=C(Nc1ccc2cc(C(=O)O)ccc2c1)OCC1c2ccccc2-c2ccc...</td>\n      <td>Cc1cc(C)c(N)c([N+](=O)[O-])c1</td>\n      <td>NCc1ccc(Oc2cccnc2)c(F)c1</td>\n      <td>Cc1cc(C)c(Nc2nc(NCc3ccc(Oc4cccnc4)c(F)c3)nc(Nc...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>126016062</td>\n      <td>O=C(N[C@H](Cc1ccc([N+](=O)[O-])cc1)C(=O)O)OCC1...</td>\n      <td>NCC1(CO)CC2C=CC1C2</td>\n      <td>Cc1nn(CCN)c(C)c1Cl</td>\n      <td>Cc1nn(CCNc2nc(NCC3(CO)CC4C=CC3C4)nc(N[C@H](Cc3...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>144211409</td>\n      <td>O=C(Nc1c(Cl)c(Cl)nc(C(=O)O)c1Cl)OCC1c2ccccc2-c...</td>\n      <td>Cc1cccc2oc(CCN)nc12.Cl.Cl</td>\n      <td>CC(C)(C)OC(=O)N1Cc2c(N)n[nH]c2C1(C)C</td>\n      <td>Cc1cccc2oc(CCNc3nc(Nc4n[nH]c5c4CN(C(=O)OC(C)(C...</td>\n      <td>sEH</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>214454004</td>\n      <td>O=C(Nc1cccc(I)c1C(=O)O)OCC1c2ccccc2-c2ccccc21</td>\n      <td>Nc1ccc(F)cc1F</td>\n      <td>Cl.NCC1CC2(C1)CC2(F)F</td>\n      <td>O=C(N[Dy])c1c(I)cccc1Nc1nc(NCC2CC3(C2)CC3(F)F)...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>188725683</td>\n      <td>O=C(Nc1ccc(C(=O)O)cc1C(F)(F)F)OCC1c2ccccc2-c2c...</td>\n      <td>COc1cc(F)c(Cl)cc1N</td>\n      <td>CCC1=NN(Cc2ccccc2C)C(=O)C1CCN</td>\n      <td>CCC1=NN(Cc2ccccc2C)C(=O)C1CCNc1nc(Nc2cc(Cl)c(F...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>81944820</td>\n      <td>O=C(NCC1CCC(C(=O)O)CC1)OCC1c2ccccc2-c2ccccc21</td>\n      <td>COc1c(N)cccc1F</td>\n      <td>Nc1ncc(Cl)nc1Cl</td>\n      <td>COc1c(F)cccc1Nc1nc(NCC2CCC(C(=O)N[Dy])CC2)nc(N...</td>\n      <td>BRD4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>218683816</td>\n      <td>O=C(Nc1ccnc(C(=O)O)c1)OCC1c2ccccc2-c2ccccc21</td>\n      <td>NCCc1coc2ccccc12</td>\n      <td>Cc1cc(N)cnc1Br</td>\n      <td>Cc1cc(Nc2nc(NCCc3coc4ccccc34)nc(Nc3ccnc(C(=O)N...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>31208011</td>\n      <td>COc1cc(C(=O)O)c(NC(=O)OCC2c3ccccc3-c3ccccc32)cn1</td>\n      <td>N#Cc1cc(N)ccc1Cl</td>\n      <td>NCCC1CCOC1</td>\n      <td>COc1cc(C(=O)N[Dy])c(Nc2nc(NCCC3CCOC3)nc(Nc3ccc...</td>\n      <td>HSA</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#生成ECFP\n#将smile转为RDKit的分子\n#df[]是pandas对数据框进行访问、修改的常见用法\n\ndf['molecule'] = df['molecule_smiles'].apply(Chem.MolFromSmiles) #借助pandas中的apply方法，对数据框中molecule_smiles列调用Chem.MolFromSmiles，将结果存储在新的molecule列中\n\n#定义了一个生成ECFP的函数“generate_ecfp\",ECFP的半径为2（默认），生成的指纹位数为1024\n#GetMorganFingerprintAsBitVect是RDKit提供的函数，用于生成分子的Morgan指纹（ECFP）\n#这个函数式定义了一个ECFP生成函数，首先会读取molecule这一列，如果是空则返回none，否则就返回生成的指纹列表\n\ndef generate_ecfp(molecule, radius=2, bits=1024):\n    if molecule is None:\n        return None\n    return list(AllChem.GetMorganFingerprintAsBitVect(molecule, radius, nBits=bits)) \n    \n#根据generate_ecfp函数进行ECFPs的生成，并存储在列表的ecfp列中\n\ndf['ecfp'] = df['molecule'].apply(generate_ecfp)#得到ECFPs\n\n#初始化和编码通用特征\nclass Featurizer:\n    def __init__(self, allowable_sets):\n        self.dim = 0\n        self.features_mapping = {}\n        for k, s in allowable_sets.items():\n            s = sorted(list(s))\n            self.features_mapping[k] = dict(zip(s, range(self.dim, len(s) + self.dim)))\n            self.dim += len(s)\n\n    def encode(self, inputs):\n        output = np.zeros((self.dim,))\n        for name_feature, feature_mapping in self.features_mapping.items():\n            feature = getattr(self, name_feature)(inputs)\n            if feature not in feature_mapping:\n                continue\n            output[feature_mapping[feature]] = 1.0\n        return output\n\n#继承Featurizer来提取原子的特征\nclass AtomFeaturizer(Featurizer):\n    def __init__(self, allowable_sets):\n        super().__init__(allowable_sets)\n\n    def symbol(self, atom):\n        return atom.GetSymbol()\n\n    def n_valence(self, atom):\n        return atom.GetTotalValence()\n\n    def n_hydrogens(self, atom):\n        return atom.GetTotalNumHs()\n\n    def hybridization(self, atom):\n        return atom.GetHybridization().name.lower()\n    \n#继承Featurizer来提取化学键的特征\nclass BondFeaturizer(Featurizer):\n    def __init__(self, allowable_sets):\n        super().__init__(allowable_sets)\n        self.dim += 1\n\n    def encode(self, bond):\n        output = np.zeros((self.dim,))\n        if bond is None:\n            output[-1] = 1.0\n            return output\n        output = super().encode(bond)\n        return output\n\n    def bond_type(self, bond):\n        return bond.GetBondType().name.lower()\n\n    def conjugated(self, bond):\n        return bond.GetIsConjugated()\n\n#实例化特征化器\natom_featurizer = AtomFeaturizer(\n    allowable_sets={\n        \"symbol\": {\"B\", \"Br\", \"C\", \"Ca\", \"Cl\", \"F\", \"H\", \"I\", \"N\", \"Na\", \"O\", \"P\", \"S\"},\n        \"n_valence\": {0, 1, 2, 3, 4, 5, 6},\n        \"n_hydrogens\": {0, 1, 2, 3, 4},\n        \"hybridization\": {\"s\", \"sp\", \"sp2\", \"sp3\"},\n    }\n)\n\nbond_featurizer = BondFeaturizer(\n    allowable_sets={\n        \"bond_type\": {\"single\", \"double\", \"triple\", \"aromatic\"},\n        \"conjugated\": {True, False},\n    }\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:34:56.307945Z","iopub.execute_input":"2024-06-05T02:34:56.308260Z","iopub.status.idle":"2024-06-05T02:34:56.559119Z","shell.execute_reply.started":"2024-06-05T02:34:56.308229Z","shell.execute_reply":"2024-06-05T02:34:56.558201Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#生成ECFP\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m#将smile转为RDKit的分子\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#df[]是pandas对数据框进行访问、修改的常见用法\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmolecule\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmolecule_smiles\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(Chem\u001b[38;5;241m.\u001b[39mMolFromSmiles) \u001b[38;5;66;03m#借助pandas中的apply方法，对数据框中molecule_smiles列调用Chem.MolFromSmiles，将结果存储在新的molecule列中\u001b[39;00m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m#定义了一个生成ECFP的函数“generate_ecfp\",ECFP的半径为2（默认），生成的指纹位数为1024\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;66;03m#GetMorganFingerprintAsBitVect是RDKit提供的函数，用于生成分子的Morgan指纹（ECFP）\u001b[39;00m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m#这个函数式定义了一个ECFP生成函数，首先会读取molecule这一列，如果是空则返回none，否则就返回生成的指纹列表\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgenerate_ecfp\u001b[39m(molecule, radius\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m, bits\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1024\u001b[39m):\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"],"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error"}]},{"cell_type":"code","source":"!pip install dgl\n!pip install torch\n!pip install numpy","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:07:08.659825Z","iopub.execute_input":"2024-06-05T02:07:08.661056Z","iopub.status.idle":"2024-06-05T02:07:55.444084Z","shell.execute_reply.started":"2024-06-05T02:07:08.661014Z","shell.execute_reply":"2024-06-05T02:07:55.442783Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Collecting dgl\n  Downloading dgl-2.1.0-cp310-cp310-manylinux1_x86_64.whl.metadata (553 bytes)\nRequirement already satisfied: numpy>=1.14.0 in /opt/conda/lib/python3.10/site-packages (from dgl) (1.26.4)\nRequirement already satisfied: scipy>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from dgl) (1.11.4)\nRequirement already satisfied: networkx>=2.1 in /opt/conda/lib/python3.10/site-packages (from dgl) (3.2.1)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from dgl) (2.31.0)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from dgl) (4.66.4)\nRequirement already satisfied: psutil>=5.8.0 in /opt/conda/lib/python3.10/site-packages (from dgl) (5.9.3)\nRequirement already satisfied: torchdata>=0.5.0 in /opt/conda/lib/python3.10/site-packages (from dgl) (0.7.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->dgl) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->dgl) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->dgl) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->dgl) (2024.2.2)\nRequirement already satisfied: torch>=2 in /opt/conda/lib/python3.10/site-packages (from torchdata>=0.5.0->dgl) (2.1.2+cpu)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=2->torchdata>=0.5.0->dgl) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=2->torchdata>=0.5.0->dgl) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=2->torchdata>=0.5.0->dgl) (1.12)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=2->torchdata>=0.5.0->dgl) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=2->torchdata>=0.5.0->dgl) (2024.3.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=2->torchdata>=0.5.0->dgl) (2.1.3)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=2->torchdata>=0.5.0->dgl) (1.3.0)\nDownloading dgl-2.1.0-cp310-cp310-manylinux1_x86_64.whl (8.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.5/8.5 MB\u001b[0m \u001b[31m57.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mInstalling collected packages: dgl\nSuccessfully installed dgl-2.1.0\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.1.2+cpu)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.3.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.3)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\n\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\n\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport dgl\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom dgl.dataloading import GraphDataLoader\nfrom dgl.nn.pytorch import GraphConv\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.model_selection import train_test_split\nfrom rdkit import Chem\n\n# 定义GNN模型\nclass GNN(nn.Module):\n    def __init__(self, in_feats, hidden_feats, out_feats):\n        super(GNN, self).__init__()\n        self.conv1 = GraphConv(in_feats, hidden_feats)\n        self.conv2 = GraphConv(hidden_feats, out_feats)\n\n    def forward(self, g, x):\n        x = F.relu(self.conv1(g, x))\n        x = self.conv2(g, x)\n        g.ndata['h'] = x\n        hg = dgl.mean_nodes(g, 'h')\n        return hg\n\n# 创建分子的图表示\ndef create_graph(smiles):\n    mol = Chem.MolFromSmiles(smiles)\n    g = dgl.DGLGraph()\n    g.add_nodes(mol.GetNumAtoms())\n    atom_features = [atom_featurizer.encode(mol.GetAtomWithIdx(i)) for i in range(mol.GetNumAtoms())]\n    g.ndata['feat'] = torch.tensor(atom_features, dtype=torch.float32)\n    bond_features = []\n    for bond in mol.GetBonds():\n        g.add_edges(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx())\n        bond_features.append(bond_featurizer.encode(bond))\n    g.edata['feat'] = torch.tensor(bond_features, dtype=torch.float32)\n    return g\n\n# 加载数据并创建图\ndf = pd.read_parquet('/kaggle/input/leash-BELKA/train.parquet')\n\n# 确保列名正确\nif 'binds' not in df.columns:\n    raise KeyError(\"Column 'binds' not found in DataFrame. Available columns are: \" + \", \".join(df.columns))\n\ngraphs = []\nlabels = []\nfor index, row in df.iterrows():\n    g = create_graph(row['molecule_smiles'])\n    graphs.append(g)\n    labels.append(row['binds'])\n    del g  # 及时删除变量，释放内存\n\n# 清理不再需要的变量\ndel df\n\n# 划分数据集\ntrain_graphs, test_graphs, train_labels, test_labels = train_test_split(graphs, labels, test_size=0.2, random_state=42)\n\n# 创建数据加载器\ntrain_loader = GraphDataLoader(train_graphs, batch_size=32, shuffle=True)\ntest_loader = GraphDataLoader(test_graphs, batch_size=32, shuffle=False)\n\n# 定义模型和训练参数\nin_feats = atom_featurizer.dim\nhidden_feats = 64\nout_feats = 32\nmodel = GNN(in_feats, hidden_feats, out_feats)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\nloss_fn = nn.BCEWithLogitsLoss()\n\n# 训练GNN模型\nnum_epochs = 20\nfor epoch in range(num_epochs):\n    model.train()\n    total_loss = 0\n    for batched_graph, labels in train_loader:\n        features = batched_graph.ndata['feat']\n        logits = model(batched_graph, features)\n        loss = loss_fn(logits, labels.float())\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        total_loss += loss.item()\n        \n        # 清理显存\n        torch.cuda.empty_cache()\n        del batched_graph, labels, features, logits, loss  # 删除变量，释放内存\n    \n    print(f'Epoch {epoch+1}/{num_epochs}, Loss: {total_loss/len(train_loader)}')\n\n# 提取GNN特征\nmodel.eval()\ntrain_gnn_features = []\ntrain_labels_list = []\nfor batched_graph, labels in train_loader:\n    features = batched_graph.ndata['feat']\n    with torch.no_grad():\n        logits = model(batched_graph, features)\n        train_gnn_features.append(logits.numpy())\n        train_labels_list.extend(labels.numpy())\n    \n    # 清理显存\n    torch.cuda.empty_cache()\n    del batched_graph, labels, features, logits  # 删除变量，释放内存\n\ntest_gnn_features = []\ntest_labels_list = []\nfor batched_graph, labels in test_loader:\n    features = batched_graph.ndata['feat']\n    with torch.no_grad():\n        logits = model(batched_graph, features)\n        test_gnn_features.append(logits.numpy())\n        test_labels_list.extend(labels.numpy())\n    \n    # 清理显存\n    torch.cuda.empty_cache()\n    del batched_graph, labels, features, logits  # 删除变量，释放内存\n\n# 转换为 NumPy 数组\ntrain_gnn_features = np.vstack(train_gnn_features)\ntest_gnn_features = np.vstack(test_gnn_features)\ndel train_loader, test_loader  # 删除数据加载器，释放内存\n\n# 结合随机森林模型\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(train_gnn_features, train_labels_list)\n\n# 预测和评估\ny_pred_proba = rf_model.predict_proba(test_gnn_features)[:, 1]\nmap_score = average_precision_score(test_labels_list, y_pred_proba)\nprint(f\"Mean Average Precision (mAP): {map_score:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-05T02:29:53.396249Z","iopub.execute_input":"2024-06-05T02:29:53.396730Z","iopub.status.idle":"2024-06-05T02:30:02.491884Z","shell.execute_reply.started":"2024-06-05T02:29:53.396693Z","shell.execute_reply":"2024-06-05T02:30:02.490426Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"\nKeyboardInterrupt\n\n","output_type":"stream"}]}]}